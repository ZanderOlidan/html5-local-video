{"version":3,"sources":["node_modules/srt-webvtt/index.js","script.js"],"names":["WebVTTConverter","constructor","resource","blobToBuffer","Promise","resolve","reject","reader","FileReader","addEventListener","event","buf","target","result","Uint8Array","readAsArrayBuffer","blobToString","blob","success","fail","text","readAsText","toVTT","utf8str","replace","concat","toTypedArray","str","split","forEach","each","push","parseInt","charCodeAt","from","getURL","Blob","TextDecoder","decoded","vttString","type","objectURL","URL","createObjectURL","then","buffer","decode","release","window","Plyr","captions","active","player","webkitURL","inputNode","document","getElementById","subNode","subTrack","file","files","videoNode","querySelector","fileURL","src","e","VTTConverter","url"],"mappings":";AAyFeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzFf,MAAMA,EACJC,YAAYC,GACLA,KAAAA,SAAWA,EAGlBC,eACS,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,UAAYC,IAC5BC,MAAAA,EAAMD,EAAME,OAAOC,OACzBR,EAAQ,IAAIS,WAAWH,MAEzBJ,EAAOE,iBAAiB,QAAS,IAAMH,EAAO,wCAC9CC,EAAOQ,kBAAkB,KAAKb,YAQ3Bc,oBAAaC,EAAMC,EAASC,GAC3BZ,MAAAA,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,UAAYC,IAC5BU,MAAAA,EAAOV,EAAME,OAAOC,OAC1BK,EAAQE,KAEVb,EAAOE,iBAAiB,QAAS,IAAMU,KACvCZ,EAAOc,WAAWJ,GAKbK,aAAMC,GACJA,OAAAA,EACJC,QAAQ,iBAAkB,SAC1BA,QAAQ,kBAAmB,QAC3BA,QAAQ,eAAgB,QACxBA,QAAQ,iBAAkB,SAC1BA,QAAQ,6BAA8B,SACtCC,OAAO,YAKLC,oBAAaC,GACZd,MAAAA,EAAS,GAIRC,OAHPa,EAAIC,MAAM,IAAIC,QAASC,IACrBjB,EAAOkB,KAAKC,SAASF,EAAKG,aAAc,OAEnCnB,WAAWoB,KAAKrB,GAGzBsB,SACS,OAAA,IAAI/B,QAAQ,CAACC,EAASC,IACrB,KAAKJ,oBAAoBkC,KACzB5B,WACD6B,YACErC,EAAgBgB,aACrB,KAAKd,SACJoC,IACOC,MACAnB,EADY,sBACKK,OAAOzB,EAAgBsB,MAAMgB,IAC9CrB,EAAO,IAAImB,KAAK,CAAChB,GAAO,CAAEoB,KAAM,aAE/BnC,OADFoC,KAAAA,UAAYC,IAAIC,gBAAgB1B,GAC9BZ,EAAQ,KAAKoC,YAEtB,KACOtC,KAAAA,eACFyC,KAAMC,IACCtB,MAAAA,EAAU,IAAIc,YAAY,SAASS,OAAOD,GAE1CzB,EADY,sBACKK,OAAOzB,EAAgBsB,MAAMC,IAC9CN,EAAO,IAAImB,KAAK,CAAChB,GAAO,CAAEoB,KAAM,aAE/BnC,OADFoC,KAAAA,UAAYC,IAAIC,gBAAgB1B,GAC9BZ,EAAQ,KAAKoC,eAlBHnC,EAAO,oCADNA,EAAO,mCADYA,EAAO,8DA2BxDyC,UACEL,IAAIC,gBAAgB,KAAKF,YAI7BO,OAAOhD,gBAAkBA,EAEVA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACtFX,aAFA,IAAA,EAAA,EAAA,QAAA,eAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,WACmB,IAAIiD,KAAK,UAAW,CAAEC,SAAU,CAAEC,QAAQ,KAAnDC,IACAV,EAAMM,OAAON,KAAOM,OAAOK,UAE3BC,EAAYC,SAASC,eAAe,gBACpCC,EAAUF,SAASC,eAAe,mBAClCE,EAAWH,SAASC,eAAe,OAoBzCF,EAAU7C,iBAAiB,SAlBF,SAAUC,GAC3BiD,IAAAA,EAAO,KAAKC,MAAM,GAClBC,EAAYN,SAASO,cAAc,SAEnCC,EAAUrB,EAAIC,gBAAgBgB,GAClCE,EAAUG,IAAMD,IAamC,GACvDN,EAAQhD,iBAAiB,SAXL,SAAUwD,GAEL,IAAIC,EAAJ,QAAiB,KAAKN,MAAM,IACpCzB,SACRS,KAAK,SAACuB,GAEHT,EAASM,IAAMG,MAKqB,GA3BpD","file":"script.7aa1e990.js","sourceRoot":"..","sourcesContent":["class WebVTTConverter {\n  constructor(resource) {\n    this.resource = resource;\n  }\n\n  blobToBuffer() {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.addEventListener('loadend', (event) => {\n        const buf = event.target.result;\n        resolve(new Uint8Array(buf));\n      });\n      reader.addEventListener('error', () => reject('Error while reading the Blob object'));\n      reader.readAsArrayBuffer(this.resource);\n    });\n  }\n  /**\n   * @param {*} blob\n   * @param {*} success\n   * @param {*} fail\n   */\n  static blobToString(blob, success, fail) {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (event) => {\n      const text = event.target.result;\n      success(text);\n    });\n    reader.addEventListener('error', () => fail());\n    reader.readAsText(blob);\n  }\n  /**\n   * @param {*} utf8str\n   */\n  static toVTT(utf8str) {\n    return utf8str\n      .replace(/\\{\\\\([ibu])\\}/g, '</$1>')\n      .replace(/\\{\\\\([ibu])1\\}/g, '<$1>')\n      .replace(/\\{([ibu])\\}/g, '<$1>')\n      .replace(/\\{\\/([ibu])\\}/g, '</$1>')\n      .replace(/(\\d\\d:\\d\\d:\\d\\d),(\\d\\d\\d)/g, '$1.$2')\n      .concat('\\r\\n\\r\\n');\n  }\n  /**\n   * @param {*} str\n   */\n  static toTypedArray(str) {\n    const result = [];\n    str.split('').forEach((each) => {\n      result.push(parseInt(each.charCodeAt(), 16));\n    });\n    return Uint8Array.from(result);\n  }\n\n  getURL() {\n    return new Promise((resolve, reject) => {\n      if (!(this.resource instanceof Blob)) return reject('Expecting resource to be a Blob but something else found.');\n      if (!(FileReader)) return reject('No FileReader constructor found');\n      if (!TextDecoder) return reject('No TextDecoder constructor found');\n      return WebVTTConverter.blobToString(\n        this.resource,\n        (decoded) => {\n          const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n          const text = vttString.concat(WebVTTConverter.toVTT(decoded));\n          const blob = new Blob([text], { type: 'text/vtt' });\n          this.objectURL = URL.createObjectURL(blob);\n          return resolve(this.objectURL);\n        },\n        () => {\n          this.blobToBuffer()\n            .then((buffer) => {\n              const utf8str = new TextDecoder('utf-8').decode(buffer);\n              const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n              const text = vttString.concat(WebVTTConverter.toVTT(utf8str));\n              const blob = new Blob([text], { type: 'text/vtt' });\n              this.objectURL = URL.createObjectURL(blob);\n              return resolve(this.objectURL);\n            });\n        },\n      );\n    });\n  }\n\n  release() {\n    URL.createObjectURL(this.objectURL);\n  }\n}\n\nwindow.WebVTTConverter = WebVTTConverter;\n\nexport default WebVTTConverter;\n","\n    import VTTConverter from 'srt-webvtt';\n\n    (function localFileVideoPlayer() {\n        const player = new Plyr('#player', { captions: { active: true }});\n        const URL = window.URL || window.webkitURL\n\n        const inputNode = document.getElementById('video-upload');\n        const subNode = document.getElementById('subtitle-upload');\n        const subTrack = document.getElementById('sub');\n\n        const playSelectedFile = function (event) {\n            var file = this.files[0];\n            var videoNode = document.querySelector('video');\n\n            var fileURL = URL.createObjectURL(file);\n            videoNode.src = fileURL;\n        }\n\n        const useSubtitle = function (e) {\n\n            const vttConverter = new VTTConverter(this.files[0]);\n            vttConverter.getURL()\n                .then((url) => {\n\n                    subTrack.src = url;\n                })\n        }\n\n        inputNode.addEventListener('change', playSelectedFile, false);\n        subNode.addEventListener('change', useSubtitle, false);\n    })()\n    "]}